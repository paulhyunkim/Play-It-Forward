// a global variable that will hold a reference to the api swf once it has loaded
var apiswf = null;
var lastSong = null;
var isPlayerLoaded = false;
var playOrPaused = 0;
var nextSong = "";
var currentTrack = "";
// playLast[past ]
var playlist = [];

$(document).ready(function() {
  // on page load use SWFObject to load the API swf into div#apiswf
  var flashvars = {
    'playbackToken': playback_token, // from token.js
    'domain': domain,                // from token.js
    'listener': 'callback_object'    // the global name of the object that will receive callbacks from the SWF
    };
  var params = {
    'allowScriptAccess': 'always'
  };
  var attributes = {};
  swfobject.embedSWF('http://www.rdio.com/api/swf/', // the location of the Rdio Playback API SWF
      'apiswf', // the ID of the element that will be replaced with the SWF
      1, 1, '9.0.0', 'expressInstall.swf', flashvars, params, attributes);

  // set up the controls
  $('#play').click(function() {
    if (playOrPaused === 0) {
      apiswf.rdio_play($('#play_key').val());
    } else if (playOrPaused === 1) {
      apiswf.rdio_pause();
    }
  });
  $('#stop').click(function() { apiswf.rdio_stop(); });
  $('#pause').click(function() { apiswf.rdio_pause(); });
  $('#previous').click(function() { apiswf.rdio_previous(); });
  $('#next').click(function() { 
    shiftSongs();
    queueRandomSong();
    console.log(playlist);
    apiswf.rdio_play(playlist[4].key); 
  });
});
// Set a starter image
$('#art').attr('src', "<%= asset_path('albumdefault.png') %>");


// the global callback object
var callback_object = {};

callback_object.ready = function ready(user) {
  // Called once the API SWF has loaded and is ready to accept method calls.

  // find the embed/object element
  apiswf = $('#apiswf').get(0);

  apiswf.rdio_startFrequencyAnalyzer({
    frequencies: '10-band',
    period: 100
  });

  if (user == null) {
    $('#nobody').show();
  } else if (user.isSubscriber) {
    $('#subscriber').show();
  } else if (user.isTrial) {
    $('#trial').show();
  } else if (user.isFree) {
    $('#remaining').text(user.freeRemaining);
    $('#free').show();
  } else {
    $('#nobody').show();
  }

  // autoplay on load
  // apiswf.rdio_play($('#play_key').val());
}


//ENTER KEY to trigger search
$("#searchtextid").keyup(function(event){
    if(event.keyCode == 13){
        $("#searchbuttonid").click();
    }
});




callback_object.freeRemainingChanged = function freeRemainingChanged(remaining) {
  $('#remaining').text(remaining);
}

callback_object.playStateChanged = function playStateChanged(playState) {
  playOrPaused = playState;
  // The playback state has changed.
  // The state can be: 0 - paused, 1 - playing, 2 - stopped, 3 - buffering or 4 - paused.
  $('#playState').text(playState);
}

callback_object.playingTrackChanged = function playingTrackChanged(playingTrack, sourcePosition) {
  // The currently playing track has changed.
  // Track metadata is provided as playingTrack and the position within the playing source as sourcePosition.
  console.log("playingTrackChanged");
  if (playingTrack != null) {
    $('#track').text(playlist[4].title);
    $('#album').text(playlist[4].album);
    $('#artist').text(playlist[4].artist);
    $('#art').attr('src', playlist[4].image_url);
  } else {
    $('#art').attr('src', "<%= asset_path('heart.png') %>");
  }
}

callback_object.playingSourceChanged = function playingSourceChanged(playingSource) {
  console.log("playingSourceChanged");
  // The currently playing source changed.
  // The source metadata, including a track listing is inside playingSource.
  
  // apiswf.rdio_queue(nextSong.key);
  // console.log("Next song is '" + nextSong.title + "' with a key of " + nextSong.key);
  // currentSong = nextSong;

  $('#city').text(playlist[4].user.city);
  $('#state').text(playlist[4].user.state);

  // var scp = angular.element('[ng-controller="UserCtrl"]').scope();
  // scp.updateUserLocation();

  // update user coordinates which each song
  // navigator.geolocation.getCurrentPosition(function(position) {
  //   userLat = position.coords.latitude;
  //   userLng = position.coords.longitude;
  //   console.log("User location updated. Latitude: " + userLat + " Longitude: " + userLng);
  // });
  // $("#userlocationinfo").attr("lat", nextSong.user.lat);
  // $("#userlocationinfo").attr("lng", nextSong.user.lng);
  geoFindMe();
}
var shiftSongs = function() {
  playlist.shift();
}

var queueRandomSong = function() {
  nextSong = playlistSongs[Math.floor(Math.random()*playlistSongs.length)];
  while (nextSong === playlist[4]) {
    nextSong = playlistSongs[Math.floor(Math.random()*playlistSongs.length)];
  }
  // apiswf.rdio_clearQueue();
  apiswf.rdio_queue(nextSong.key);
  playlist[5] = nextSong;
}

callback_object.volumeChanged = function volumeChanged(volume) {
  // The volume changed to volume, a number between 0 and 1.
}

callback_object.muteChanged = function muteChanged(mute) {
  // Mute was changed. mute will either be true (for muting enabled) or false (for muting disabled).
}

callback_object.positionChanged = function positionChanged(position) {
  //The position within the track changed to position seconds.
  // This happens both in response to a seek and during playback.
  var seconds = "";
  if (Math.round(position) % 60 < 10) {
    seconds = "0" + (Math.round(position) % 60);
  } else {
    seconds = Math.round(position % 60);
  }


  var totalTime = playlist[4].duration;
  if (totalTime % 60 < 10) {
    totalSeconds = "0" + (totalTime % 60);
  } else {
    totalSeconds = totalTime % 60;
  }

  $('#position').text(Math.floor(Math.round(position)/60) + ":" + seconds + " / " + Math.floor(Math.round(totalTime)/60) + ":" + totalSeconds);

  if (position > 10) {
    queueRandomSong();
    apiswf.rdio_next();
  }


  }

callback_object.queueChanged = function queueChanged(newQueue) {
  console.log("queueChanged");
  console.log(newQueue);
  // The queue has changed to newQueue.
}

callback_object.shuffleChanged = function shuffleChanged(shuffle) {
  // The shuffle mode has changed.
  // shuffle is a boolean, true for shuffle, false for normal playback order.
}

callback_object.repeatChanged = function repeatChanged(repeatMode) {
  // The repeat mode change.
  // repeatMode will be one of: 0: no-repeat, 1: track-repeat or 2: whole-source-repeat.
}

callback_object.playingSomewhereElse = function playingSomewhereElse() {
  // An Rdio user can only play from one location at a time.
  // If playback begins somewhere else then playback will stop and this callback will be called.
}

callback_object.updateFrequencyData = function updateFrequencyData(arrayAsString) {
  // Called with frequency information after apiswf.rdio_startFrequencyAnalyzer(options) is called.
  // arrayAsString is a list of comma separated floats.

  var arr = arrayAsString.split(',');

  $('#freq div').each(function(i) {
    $(this).width(parseInt(parseFloat(arr[i])*500));
  })
}